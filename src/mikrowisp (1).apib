FORMAT: 1A
HOST: https://demo.mikrosystem.net

# Mikrowisp API v1.1
La API Mikrowisp v1.1. Sigue los principios RESTful, por lo que la API no tiene estado y los métodos http y los códigos de respuesta se usan siempre que sea posible.
La url para las solicitudes es: http: //IP_MIKROWISP/api/v1

## Ejemplo
Código ejemplo vía PHP
```#!php
<?php
$ch = curl_init();

curl_setopt($ch, CURLOPT_URL, "https://demo.mikrosystem.net/api/v1/GetClientsDetails");
curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
curl_setopt($ch, CURLOPT_HEADER, FALSE);

curl_setopt($ch, CURLOPT_POST, TRUE);

curl_setopt($ch, CURLOPT_POSTFIELDS, "{
  \"token\": \"Smx2SVdkbUZIdjlCUlkxdFo1cUNMQT09\",
  \"idcliente\": 6,
  \"cedula\": \"3434352\"
}");

curl_setopt($ch, CURLOPT_HTTPHEADER, array(
  "Content-Type: application/json"
));

$response = curl_exec($ch);
curl_close($ch);
vardump($response);
?>

```


# Group FACTURACION

##Crear factura [/api/v1/CreateInvoice]

### Nueva factura [POST]
Crea una nueva factura de servicio

+ Request (application/json)
    + Attributes (nueva factura)
+ Response 200 (application/json)
    + Body 

            {
                "estado": "exito",
                "idfactura": 130,
                "mensaje": "Nueva factura de servicios creado vía API - Factura ID: 130"
            }

##Lista facturas [/api/v1/GetInvoices]

### Lista facturas [POST]
Muestra la lista de todas facturas utilizando filtros.

+ Request (application/json)
    + Attributes (lista facturas )
+ Response 200 (application/json)
    + Body 

            {
                "estado": "exito",
                 "facturas": [
                    {
                        "id": 210,
                        "legal": 0,
                        "idcliente": 6,
                        "emitido": "2019-05-04",
                        "vencimiento": "2019-05-10",
                        "total": "343.75",
                        "estado": "vencido",
                        "cobrado": "0.00",
                        "impuesto": "52.61",
                        "oxxo_referencia": "",
                        "barcode_cobro_digital": "73852040377595616051900361438",
                        "fechapago": "0000-00-00",
                        "subtotal": "291.14",
                        "subtotal2": "S/. 291.14",
                        "total2": "S/. 343.75",
                        "impuesto2": "S/. 52.61",
                        "formapago": ""
                    },...
                            ]
            }

##Datos factura [/api/v1/GetInvoice]

### datos factura [POST]
Recupera los datos de una factura específica.
+ Request (application/json)
    + Attributes (datos factura)
+ Response 200 (application/json)
    + Body 

            {
                "estado": "exito",
                "factura": {
                "id": 1,
                "legal": 0,
                "idcliente": 3,
                "emitido": "2019-05-13",
                "vencimiento": "2019-05-15",
                "total": "170.00",
                "estado": "pagado",
                "cobrado": "170.00",
                "impuesto": "25.93",
                "oxxo_referencia": "",
                "barcode_cobro_digital": "73852040786931020051900179973",
                "fechapago": "2019-05-14",
                "subtotal": "144.07",
                "subtotal2": "MX$144.07",
                "total2": "MX$170.00",
                "impuesto2": "MX$25.93",
                "formapago": "Depósito bancario"
                }
            }
## Promesa de Pago [/api/v1/PromesaPago]

### Promesa de Pago [POST]
Generar una promesa de pago a una factura.
+ Request (application/json)
    + Attributes (Promesa Pago)
+ Response 200 (application/json)
    + Body
    
            {
                "estado": "exito",
                "mensaje": "Promesa de pago registrado correctamente."
            }
            
## Pagar factura [/api/v1/PaidInvoice]

### Pagar factura [POST]
Pagar una factura y Activa al cliente si se encuentra suspendido.

+ Request (application/json)
    + Attributes (pagar factura)
+ Response 200 (application/json)
    + Body 

            {
              "estado": "exito",
              "mensaje": "Pago registrado correctamente."
            }
## Eliminar factura [/DeleteInvoice]

### Eliminar factura [POST]
Eliminar una factura con estado No pagado.

+ Request (application/json)
    + Attributes (eliminar factura)
+ Response 200 (application/json)
    + Body 

            {
              "estado": "exito",
              "mensaje": "Factura eliminado correctamente."
            }
            
## Eliminar pago [/api/v1/DeleteTransaccion]         
### Eliminar Pago [POST]
Elimina el pago de una factura.

+ Request (application/json)
    + Attributes (eliminar pago)
+ Response 200 (application/json)
    + Body 

            {
              "estado": "exito",
              "mensaje": "Pago eliminado correctamente."
            }
            
# Group USUARIOS
##Nuevo cliente [/api/v1/NewUser]

### Nuevo cliente [POST]
Registra  un cliente
+ Request (application/json)
    + Attributes (nuevo cliente)
+ Response 200 (application/json)
    + Body 

            {

              "estado": "exito",
              "mensaje":"El cliente fué registrado correctamente.",
              "idcliente":100
            }
            
##Ver cliente [/api/v1/GetClientsDetails]

### Ver cliente [POST]
Muestra los datos de un cliente
+ Request (application/json)
    + Attributes (ver cliente)
+ Response 200 (application/json)
    + Body 

            {

              "estado": "exito",
              "datos": [
                {
                  "id": 6,
                  "nombre": "ARIEL Perez",
                  "estado": "ACTIVO",
                  "correo": "",
                  "telefono": "45434565",
                  "movil": "998283745",
                  "cedula": "65454323",
                  "pasarela": "",
                  "codigo": "l4o4gp",
                  "direccion_principal": "2301 Peger Rd.",
                  "servicios": [
                    {
                      "id": 5,
                      "idperfil": 2,
                      "nodo": 2,
                      "costo": "150.00",
                      "ipap": "",
                      "mac": "00:44:56:56:78:17",
                      "ip": "192.168.33.3",
                      "instalado": "0000-00-00",
                      "pppuser": "User6",
                      "ppppass": "Pass6",
                      "tiposervicio": "internet",
                      "status_user": "OFFLINE",
                      "coordenadas": "-11.984449254433779,-77.0827752259944",
                      "direccion": "",
                      "snmp_comunidad": "public",
                      "perfil": "Plan 4Mbps"
                    }
                  ],
                  "facturacion": {
                    "facturas_nopagadas": 4,
                    "total_facturas": "750.00"
                  }
                }
              ]
            }
##Actualizar cliente [/api/v1/UpdateUser]

### Actualizar cliente [POST]
Permite editar datos del cliente como nombre,teléfonos,correo,contraseña portal client,cédula
+ Request (application/json)
    + Attributes (actualizar cliente)
+ Response 200 (application/json)
    + Body 

            {
              "estado": "exito",
              "mensaje": "Datos actualizados correctamente."
            }

##Activar cliente [/api/v1/ActiveService]

### Activar cliente [POST]
Activa los servicios de los clientes cuando se encuentra con estado "SUSPENDIDO".
+ Request (application/json)
    + Attributes (activar cliente)
+ Response 200 (application/json)
    + Body 

            {
              "estado": "exito",
              "mensaje": "Cliente Activado correctamente."
            }
            
##Suspender cliente [/api/v1/SuspendService]

### Suspender cliente [POST]
Suspende los servicios de los clientes cuando se encuentra con estado "ACTIVO".
+ Request (application/json)
    + Attributes (activar cliente)
+ Response 200 (application/json)
    + Body 

            {
              "estado": "exito",
              "mensaje": "Cliente Suspendido correctamente."
            }
            
##Nuevo Pre-Registro [/api/v1/NewPreRegistro]

### Nuevo Pre-Registro (Instalaciones) [POST]
Registra un Pre-registro en Instalaciones.
+ Request (application/json)
    + Attributes (pre registro)
+ Response 200 (application/json)
    + Body 

            {
              "estado": "exito",
              "idregistro": 350
              "mensaje": "Operación exitosa."
            }
            
##Lista de Instalaciones [/api/v1/ListInstall]

### Lista de Pre/Instalaciones [POST]
Muestra lista de Instalaciones.
+ Request (application/json)
    + Attributes (install registro)
+ Response 200 (application/json)
    + Body 

            {
                "estado": "exito",
                "instalaciones": [
                                    {
                                        "id": 4,
                                        "userid": 93,
                                        "fecha_ingreso": "2018-10-30",
                                        "fecha_salida": "0000-00-00",
                                        "idtecnico": 0,
                                        "direccion": "SAN CRESCENTE 240  101, Las Condes",
                                        "telefono": "9652368914",
                                        "movil": "933901439",
                                        "idnodo": 0,
                                        "email": "correo@gmail.com",
                                        "cedula": "995658100",
                                        "estate": "INSTALADO",
                                        "cliente": "COMERCIAL C.W. CHILE LIMITADA",
                                        "notas": "",
                                        "fecha_instalacion": "0001-11-30 00:00:00",
                                        "zona": 4,
                                        "idvendedor": 0,
                                        "cliente_pruebas": "",
                                        "gaa": "",
                                        "colonia": "",
                                        "tipo_estrato": 0,
                                        "N_orden": ""
                                    }
                                ],
                "mensaje": "Se ha encontrado 1  Registros."
            }
            

# Group TICKET

##Crear nuevo Ticket [/api/v1/NewTicket]

### Crear Nuevo Ticket [POST]
Permite crear un ticket al area de Soporte,ventas,etc.

+ Request (application/json)
    + Attributes (nuevo ticket)
+ Response 200 (application/json)
    + Body 

            {
                "estado": "exito",
                "idticket":"100",
                "mensaje": "Ticket Registrado correctamente."
            }
##Cerrar Ticket [/api/v1/CloseTicket]

### Cerrar Ticket [POST]
Permite cerrar un ticket.

+ Request (application/json)
    + Attributes (cerrar ticket)
+ Response 200 (application/json)
    + Body 

            {
                "estado": "exito",
                "mensaje": "Ticket cerrado correctamente."
            }
##Listar Ticket [/api/v1/ListTicket]

### Listar Ticket [POST]
Muestra los ticket de soporte de un cliente.

+ Request (application/json)
    + Attributes (listar ticket)
+ Response 200 (application/json)
    + Body 

            {
                "estado": "exito",
                "mensaje": "Operación exitosa.",
                "data": {
                    "abiertos": 1,
                    "cerrados": 3,
                    "respondidos": 2,
                    "respuesta_cliente": 0,
                    "tickets": [
                        {
                            "id": 22,
                            "idcliente": 3,
                            "asunto": "tecnico yahoo",
                            "fecha_soporte": "2019-09-17 18:20:52",
                            "estado": "abierto",
                            "fecha_cerrado": "0000-00-00 00:00:00",
                            "solicitante": "tecnico yahoo",
                            "fechavisita": "0000-00-00",
                            "turno": " (TARDE)",
                            "agendado": "oficina",
                            "lastdate": "2019-09-17 18:20:52",
                            "dp": "Soporte técnico",
                            "motivo_cierre": ""
                        },
                        {
                            "id": 6,
                            "idcliente": 3,
                            "asunto": "Ayuda",
                            "fecha_soporte": "2018-09-21 00:43:44",
                            "estado": "respondido",
                            "fecha_cerrado": "0000-00-00 00:00:00",
                            "solicitante": "",
                            "fechavisita": "0000-00-00",
                            "turno": "",
                            "agendado": "",
                            "lastdate": "2018-10-17 23:58:00",
                            "dp": "Soporte técnico",
                            "motivo_cierre": ""
                        },
                        {
                            "id": 4,
                            "idcliente": 3,
                            "asunto": "Ticket de soporte Portal",
                            "fecha_soporte": "2018-09-18 19:35:59",
                            "estado": "respondido",
                            "fecha_cerrado": "0000-00-00 00:00:00",
                            "solicitante": "",
                            "fechavisita": "0000-00-00",
                            "turno": "",
                            "agendado": "",
                            "lastdate": "2018-09-21 10:16:07",
                            "dp": "Soporte técnico",
                            "motivo_cierre": ""
                        },
                        {
                            "id": 2,
                            "idcliente": 3,
                            "asunto": "Ticket nuevo de soporte",
                            "fecha_soporte": "2018-09-18 16:56:05",
                            "estado": "cerrado",
                            "fecha_cerrado": "2018-09-21 10:32:45",
                            "solicitante": "",
                            "fechavisita": "0000-00-00",
                            "turno": " (TARDE)",
                            "agendado": "oficina",
                            "lastdate": "2018-09-21 00:46:45",
                            "dp": "Soporte técnico",
                            "motivo_cierre": ""
                        },
                        {
                            "id": 3,
                            "idcliente": 3,
                            "asunto": "Ticket adjunta imagen",
                            "fecha_soporte": "2018-09-18 16:57:14",
                            "estado": "cerrado",
                            "fecha_cerrado": "2018-09-21 10:32:42",
                            "solicitante": "",
                            "fechavisita": "0000-00-00",
                            "turno": " (TARDE)",
                            "agendado": "oficina",
                            "lastdate": "2018-09-21 00:00:52",
                            "dp": "Soporte técnico",
                            "motivo_cierre": ""
                        },
                        {
                            "id": 5,
                            "idcliente": 3,
                            "asunto": "Ticket soporte",
                            "fecha_soporte": "2018-09-18 19:46:18",
                            "estado": "cerrado",
                            "fecha_cerrado": "2018-09-21 10:32:32",
                            "solicitante": "",
                            "fechavisita": "0000-00-00",
                            "turno": "",
                            "agendado": "",
                            "lastdate": "2018-09-20 23:56:37",
                            "dp": "Soporte técnico",
                            "motivo_cierre": ""
                        }
                    ]
                }
            }
# Group MENSAJERIA

##Enviar SMS [/api/v1/NewSMS]

### Enviar SMS [POST]
Permite enviar un SMS al cliente, el mensaje es enviado un minuto después de enviado la orden.

+ Request (application/json)
    + Attributes (nuevo sms)
+ Response 200 (application/json)
    + Body 

            {
                "estado": "exito",
                "mensaje": "SMS generado correctamente."
            }

# Group ROUTERS

##Lista Routers [/api/v1/GetRouters]

### Lista Routers [POST]
Permite recuperar todos los Routers ó uno por su ID.

+ Request (application/json)
    + Attributes (lista router)
+ Response 200 (application/json)
    + Body 

            {
                "estado": "exito",
                "routers": [
                                {
                                    "id": 2,
                                    "nombre": "RB Principal",
                                    "ip": "192.168.77.1",
                                    "coordenadas": "",
                                    "version": "6.47.8 (stable)",
                                    "estado": "DESCONECTADO",
                                    "modelo": "RB2011UAS-2HnD",
                                    "serial": "403456A5618"
                                }
                            ]
            }

# Group MONITOREO

##Lista Equipos [/api/v1/GetMonitoreo]

### Lista Equipos [POST]
Permite recuperar la lista de equipos en monitoreo.

+ Request (application/json)
    + Attributes (lista monitoreo)
+ Response 200 (application/json)
    + Body 

            {
                "estado": "exito",
                "equipos": [
                                {
                                    "id": 1,
                                    "nombre": "Google",
                                    "equipo": "rb 1100",
                                    "ip": "8.8.8.8",
                                    "estado": 1
                                }
                            ]
            }

# Group FACILITO

##Consultar Deuda [/facilito/consultadeuda]
### Consulta deuda [POST]
Permite recuperar la facturas pendientes de pago de cliente mediante su Nº de cédula.

+ Request (application/json)
    + Attributes (facilito deuda)
+ Response 200 (application/json)
    + Body 

            {
                "code": "000",
                "IDFactura": 2161,
                "detalle": "Pago de comprobante Nº 00002161 -  Vencimiento: 28/02/2022",
                "valor": "500.00",
                "mensaje": "Operación exitosa."
            }

##Pagar Deuda [/facilito/registrarpago]
### Pagar deuda [POST]
El método de pago de deuda es con el que se registra el valor que cliente cancela en la caja.

+ Request (application/json)
    + Attributes (facilito pagar)
+ Response 200 (application/json)
    + Body 

            {
                "code": "000",
                "autorizacion": 16401,
                "valor": "500.00",
                "mensaje": "Operación exitosa."
            }

##Reverso [/facilito/reversopago]
### Reverso [POST]
El método de reverso es utilizado para los casos en que Facilito no reciba respuesta al
requerimiento de pago en un tiempo prudente, también se utilizara para realizar ajustes
automáticos luego del proceso de conciliación.

+ Request (application/json)
    + Attributes (facilito reverso)
+ Response 200 (application/json)
    + Body 

            {
                "code": "000",
                "mensaje": "Operación exitosa."
            }
            
##Consultar pagos [/facilito/consultapago]
### consultar pagos [POST]
El método de consulta de pagos es con el que se obtendrán todas las transacciones registradas
para realizar una conciliación automática entre las 2 entidades.

+ Request (application/json)
    + Attributes (facilito consulta)
+ Response 200 (application/json)
    + Body 

            [
                {
                    "IDFactura": 2161,
                    "valor": "500.00",
                    "secuencial": "123456789123"
                }
            ]
# Group PUNTOAGIL

##Consultar Deuda [/puntoagil/consultadeuda]
### Consulta deuda [POST]
Permite recuperar la facturas pendientes de pago de cliente mediante su Nº de cédula.

+ Request (application/json)
    + Attributes (puntoagil deuda)
+ Response 200 (application/json)
    + Body 

            {
                "code": "000",
                "IDFactura": 2161,
                "detalle": "Pago de comprobante Nº 00002161 -  Vencimiento: 28/02/2022",
                "valor": "500.00",
                "mensaje": "Operación exitosa."
            }

##Pagar Deuda [/puntoagil/registrarpago]
### Pagar deuda [POST]
El método de pago de deuda es con el que se registra el valor que cliente cancela en la caja.

+ Request (application/json)
    + Attributes (puntoagil pagar)
+ Response 200 (application/json)
    + Body 

            {
                "code": "000",
                "autorizacion": 16401,
                "valor": "500.00",
                "mensaje": "Operación exitosa."
            }

##Reverso [/puntoagil/reversopago]
### Reverso [POST]
El método de reverso es utilizado para los casos en que Facilito no reciba respuesta al
requerimiento de pago en un tiempo prudente, también se utilizara para realizar ajustes
automáticos luego del proceso de conciliación.

+ Request (application/json)
    + Attributes (puntoagil reverso)
+ Response 200 (application/json)
    + Body 

            {
                "code": "000",
                "mensaje": "Operación exitosa."
            }
            
##Consultar pagos [/puntoagil/consultapago]
### consultar pagos [POST]
El método de consulta de pagos es con el que se obtendrán todas las transacciones registradas
para realizar una conciliación automática entre las 2 entidades.

+ Request (application/json)
    + Attributes (puntoagil consulta)
+ Response 200 (application/json)
    + Body 

            [
                {
                    "IDFactura": 2161,
                    "valor": "500.00",
                    "secuencial": "123456789123"
                }
            ]

# Group BANCARD           
##Consultar Deuda [/bancard/consultadeuda]
### Consulta Deuda [POST]
Permite recuperar la facturas pendientes de pago de cliente mediante su Nº de cédula.

+ Request (application/json)
    + Attributes (bancard deuda)
+ Response 200 (application/json)
    + Body 

            {
                "code": "000",
                "IDFactura": 2161,
                "detalle": "Pago de comprobante Nº 00002161 -  Vencimiento: 28/02/2022",
                "valor": "500.00",
                "mensaje": "Operación exitosa."
            }


##Pagar Deuda [/bancard/registrarpago]
### Pagar deuda [POST]
El método de pago de deuda es con el que se registra el valor que cliente cancela en la caja.

+ Request (application/json)
    + Attributes (bancard pagar)
+ Response 200 (application/json)
    + Body 

            {
                "code": "000",
                "autorizacion": 16401,
                "valor": "500.00",
                "mensaje": "Operación exitosa."
            }

##Reverso [/bancard/reversopago]
### Reverso [POST]
El método de reverso es utilizado para los casos en que Bancard no reciba respuesta al
requerimiento de pago en un tiempo prudente, también se utilizara para realizar ajustes
automáticos luego del proceso de conciliación.

+ Request (application/json)
    + Attributes (bancard reverso)
+ Response 200 (application/json)
    + Body 

            {
                "code": "000",
                "mensaje": "Operación exitosa."
            }
            
##Consultar pagos [/bancard/consultapago]
### consultar pagos [POST]
El método de consulta de pagos es con el que se obtendrán todas las transacciones registradas
para realizar una conciliación automática entre las 2 entidades.

+ Request (application/json)
    + Attributes (bancard consulta)
+ Response 200 (application/json)
    + Body 

            [
                {
                    "IDFactura": 2161,
                    "valor": "500.00",
                    "secuencial": "123456789123"
                }
            ]

# Data Structures
## facilito deuda (object)
+ token: `Smx2SVdkbUZIdjlCUlkxdFo1cUNMQT09` (string, required) - Contraseña de Acceso API.
+ cedula: `4034567651` (number, required) - Número de cédula a consultar.

## facilito reverso (object)
+ token: `Smx2SVdkbUZIdjlCUlkxdFo1cUNMQT09` (string, required) - Contraseña de Acceso API.
+ IDFactura: `21619` (number, required) - ID de factura.
+ secuencial: `123456789123` (number, required) - Secuencial facilito.

## facilito consulta (object)
+ token: `Smx2SVdkbUZIdjlCUlkxdFo1cUNMQT09` (string, required) - Contraseña de Acceso API.
+ fecha: `2022-08-01` (string,required) - Fecha de registro del pago,formato YYYY-MM-DD

## facilito pagar (object)
+ token: `Smx2SVdkbUZIdjlCUlkxdFo1cUNMQT09` (string, required) - Contraseña de Acceso API.
+ IDFactura: `21619` (number, required) - ID de factura.
+ valor: `500.00` (number, required) - Monto a pagar.
+ fecha: `2022-08-01` (string,required) - Fecha de registro del pago,formato YYYY-MM-DD
+ secuencial: `123456789123` (number, required) - Secuencial facilito.

## puntoagil deuda (object)
+ token: `Smx2SVdkbUZIdjlCUlkxdFo1cUNMQT09` (string, required) - Contraseña de Acceso API.
+ cedula: `4034567651` (number, required) - Número de cédula a consultar.

## puntoagil reverso (object)
+ token: `Smx2SVdkbUZIdjlCUlkxdFo1cUNMQT09` (string, required) - Contraseña de Acceso API.
+ IDFactura: `21619` (number, required) - ID de factura.
+ secuencial: `123456789123` (number, required) - Secuencial facilito.

## puntoagil consulta (object)
+ token: `Smx2SVdkbUZIdjlCUlkxdFo1cUNMQT09` (string, required) - Contraseña de Acceso API.
+ fecha: `2022-08-01` (string,required) - Fecha de registro del pago,formato YYYY-MM-DD


## puntoagil pagar (object)
+ token: `Smx2SVdkbUZIdjlCUlkxdFo1cUNMQT09` (string, required) - Contraseña de Acceso API.
+ IDFactura: `21619` (number, required) - ID de factura.
+ valor: `500.00` (number, required) - Monto a pagar.
+ fecha: `2022-08-01` (string,required) - Fecha de registro del pago,formato YYYY-MM-DD
+ secuencial: `123456789123` (number, required) - Secuencial facilito.

## bancard deuda (object)
+ token:  `Smx2SVdkbUZIdjlCUlkxdFo1cUNMQT09` (string, required) - Contraseña de Acceso API.
+ cedula: `4034567651` (number, required) - Número de cédula a consultar.

## bancard reverso (object)
+ token: `Smx2SVdkbUZIdjlCUlkxdFo1cUNMQT09` (string, required) - Contraseña de Acceso API.
+ IDFactura: `21619` (number, required) - ID de factura.
+ secuencial: `123456789123` (number, required) - Secuencial facilito.

## bancard pagar (object)
+ token: `Smx2SVdkbUZIdjlCUlkxdFo1cUNMQT09` (string, required) - Contraseña de Acceso API.
+ IDFactura: `21619` (number, required) - ID de factura.
+ valor: `500.00` (number, required) - Monto a pagar.
+ fecha: `2022-08-01` (string,required) - Fecha de registro del pago,formato YYYY-MM-DD
+ secuencial: `123456789123` (number, required) - Secuencial facilito.

## bancard consulta (object)
+ token: `Smx2SVdkbUZIdjlCUlkxdFo1cUNMQT09` (string, required) - Contraseña de Acceso API.
+ fecha: `2022-08-01` (string,required) - Fecha de registro del pago,formato YYYY-MM-DD

## lista router (object)
+ token: `Smx2SVdkbUZIdjlCUlkxdFo1cUNMQT09` (string, required) - Contraseña de Acceso API.
+ id: `2` (number, required) - ID del router, para mostrar todos -1.

## lista monitoreo (object)
+ token: `Smx2SVdkbUZIdjlCUlkxdFo1cUNMQT09` (string, required) - Contraseña de Acceso API.
+ id: `2` (number, required) - ID del equipo, para mostrar todos -1.

## nuevo sms (object)
+ token: `Smx2SVdkbUZIdjlCUlkxdFo1cUNMQT09` (string, required) - Contraseña de Acceso API.
+ idcliente: `6` (number, required) - ID del cliente al cual se va enviar un mensaje de texto.
+ mensaje: `Mensaje vía API` (string, required) - Mensaje a enviar.

## install registro (object)
+ token: `Smx2SVdkbUZIdjlCUlkxdFo1cUNMQT09` (string, required) - Contraseña de Acceso API.
+ estado: `PENDIENTE` (string,optional) - Filtrar por Estado PENDIENTE,NO INSTALADO,INSTALADO.
+ cedula: `3434352` (string,optional) - Filtrar por Nº de cedula,Dni,cuit,rut,nit,etc.

## datosupdate (object)
+ nombre: `Cliente API API` (string)
+ correo: `usercliente@correo.com` (string)
+ telefono: `45555655 (string)
+ movil: `999998987` (string)
+ cedula: `554545445` (string)
+ codigo: `Contraseña portal cliente` (string)
+ direccion_principal: `Av. xxxx 4445` (string)
+ campo_personalizado: `Datos personalizado (string)

## actualizar cliente (object)
+ token: `Smx2SVdkbUZIdjlCUlkxdFo1cUNMQT09` (string, required) - Contraseña de Acceso API.
+ idcliente: `6` (number, required) - ID cliente
+ datos (datosupdate) - Datos a actuaizar

## eliminar pago (object)
+ token: `Smx2SVdkbUZIdjlCUlkxdFo1cUNMQT09` (string, required) - Contraseña de Acceso API.
+ factura: `6` (number, required) - ID de Factura a eliminar el pago.

## eliminar factura (object)
+ token: `Smx2SVdkbUZIdjlCUlkxdFo1cUNMQT09` (string, required) - Contraseña de Acceso API.
+ idfactura: `6` (number, required) - ID de Factura a eliminar.


## ver cliente (object)
+ token: `Smx2SVdkbUZIdjlCUlkxdFo1cUNMQT09` (string, required) - Contraseña de Acceso API.
+ idcliente: `6` (number, optional) - Filtra por ID cliente
+ telefono: `10` (number, optional) - Filtra por Número movil o Fijo.
+ cedula: `3434352` (string,optional) - Filtrar por Nº de cedula,Dni,cuit,rut,nit,etc.

## adjunto (object)
+ nombre: `prueba.png` (string) - Nombre del archivo
+ file: `` (string) - Archivo codificado en base64

## nuevo cliente (object)
+ token: `Smx2SVdkbUZIdjlCUlkxdFo1cUNMQT09` (string, required) - Contraseña de Acceso API.
+ nombre: `Carlos miguel perez` (string, required) - Nombre completo del cliente. 
+ cedula: `45464534` (string, optional) - Nº Identificación del cliente(Cédula,Cuit,DNI,etc).
+ correo: `correo@correo.com` (string, optional) - Email del cliente). 
+ telefono: `5124345` (string, optional) - Teléfono fijo). 
+ movil: `989898989` (string, optional) - Teléfono celular). 
+ direccion_principal: `Av del aire 333` (string, optional) - Direccion completa del cliente). 


## pre registro (object)
+ token: `Smx2SVdkbUZIdjlCUlkxdFo1cUNMQT09` (string, required) - Contraseña de Acceso API.
+ cliente: `Carlos miguel perez` (string, required) - Nombre completo del cliente. 
+ cedula: `45464534` (string, required) - Nº Identificación del cliente(Cédula,Cuit,DNI,etc). 
+ direccion: `Av luis miguel 3356` (string, required) - Dirección del cliente. 
+ telefono: `5123345` (string, optional) - Teléfono Fijo.
+ movil: `9888877665` (string, optional) - Teléfono Celular. 
+ email: `correo@gmail.com` (string, optional) - Correo electrónico del cliente.
+ notas: `Hola estoy interesando en el servicio ..` (string, optional) - Texto que será agreado como notas en el Pre-Registro.
+ fecha_instalacion: `2020-12-20 10:30:35` (string,optional) - Fecha estimada para su instalación,
si no se define se registrará la fecha y hora actual en formato YYYY-MM-DD HH:mm:ss

## activar cliente (object)
+ token: `Smx2SVdkbUZIdjlCUlkxdFo1cUNMQT09` (string, required) - Contraseña de Acceso API.
+ idcliente: `33` (number, required) - ID cliente 

## listar ticket (object)
+ token: `Smx2SVdkbUZIdjlCUlkxdFo1cUNMQT09` (string, required) - Contraseña de Acceso API.
+ idcliente: `33` (number, required) - ID cliente 

## cerrar ticket (object)
+ token: `Smx2SVdkbUZIdjlCUlkxdFo1cUNMQT09` (string, required) - Contraseña de Acceso API.
+ idticket: `1` (number, required) - ID ticket
+ motivo_cierre: `trabajo finalizado` (string, optional) - Motivo del cierre del ticket.

## nuevo ticket (object)
+ token: `Smx2SVdkbUZIdjlCUlkxdFo1cUNMQT09` (string, required) - Contraseña de Acceso API.
+ idcliente: `33` (number, required) - ID cliente
+ dp: `1` (number, required) - ID Departamento Por defecto 1: Soporte Técnico
+ asunto: `Nuevo ticket de soporte` (string, required) - Asunto del ticket
+ solicitante: `Luis Miguel` (string, optional) - Nombre de la persona que Abre el ticket en caso que no sea el mismo cliente.
+ fechavisita: `2020-07-10` (string, required) - Fecha Programada de visita YYYY-MM-DD
+ turno: `TARDE` (string, required) - Turno de visita, puede ser TARDE ó MAÑANA.
+ agendado: `PAGINA WEB` (string, required) - Desde donde fue Abierto el ticket puede ser: oficina,cliente,VIA TELEFONICA,PRESENCIAL,PAGINA WEB,RED SOCIAL.
+ contenido: `Hola,<br> Necesito ayuda para mi conexión de internet.` (string, required) - Ingrese los detalles del ticket
+ adjunto (adjunto, optional) - Archivo adjunto
                        
## nueva factura (object)
+ token: `Smx2SVdkbUZIdjlCUlkxdFo1cUNMQT09` (string, required) - Contraseña de Acceso API.
+ idcliente: `6` (number, required) - ID cliente
+ vencimiento: `2019-08-01` (string,required) - Fecha de vencimeinto YYYY-MM-DD

## lista facturas (object)
+ token: `Smx2SVdkbUZIdjlCUlkxdFo1cUNMQT09` (string, required) - Contraseña de Acceso API.
+ limit: `25` (number, optional) - límite de facturas a mostrar, por defecto 25
+ estado: `3` (number, optional) - Filtra por estado de la Factura
0 = Pagadas, 
1 = No pagadas, 
2 = Anuladas, 
vacio = Cualquier estado
+ idcliente: `6` (number, optional) - Filtra por ID cliente
+ fechapago: `2021-08-09` (string, optional) - Fecha cuando fué pagada la factura YYYY-MM-DD
+ formapago: `Efectivo Oficina/Sucursal` (string, optional) - Formas de pago/pasarela de pago.

## datos factura (object)
+ token: `Smx2SVdkbUZIdjlCUlkxdFo1cUNMQT09` (string, required) - Contraseña de Acceso API.
+ idfactura: `1` (number, required) - ID Factura

## pagar factura (object)
+ token: `Smx2SVdkbUZIdjlCUlkxdFo1cUNMQT09` (string, required) - Contraseña de Acceso API.
+ idfactura: `130` (number, required) - ID Factura a pagar
+ pasarela: `Paypal` (string, required) - Nombre de la pasarela de pago, ejm: Paypal
+ cantidad: `200` (number,optional) - la cantidad pagada, se puede dejar sin definir, 
para tomar la cantidad total de la factura
+ comision: `10` (number,optional) - El monto que se pagó como comisión para este pago.
+ idtransaccion: `10` (string,optional) - Código o Nº de operación del pago.
+ fecha: `2019-08-01 10:30:35` (string,optional) - Fecha de registro del pago,
si no se define se registrará la fecha y hora actual en formato YYYY-MM-DD HH:mm:ss

## Promesa Pago (object)
+ token: `Smx2SVdkbUZIdjlCUlkxdFo1cUNMQT09` (string, required) - Contraseña de Acceso API.
+ idfactura: `130` (number, required) - ID Factura a registrar promesa de pago
+ fechalimite: `2021-08-09` (string, required) - Fecha limite de la promesa de pago, Maximo 20 días YYYY-MM-DD
+ descripcion: `Promesa por feriado` (string, optional) - Descripcion sobre la promesa de pago.
